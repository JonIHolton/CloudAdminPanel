package com.ITSA.AdminProxy.fluentd;


import com.ITSA.AdminProxy.model.orchestrator.User;
import com.google.gson.JsonObject;
import java.io.FileWriter;
import java.io.IOException;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.UUID;

public class ConcreteLogObserver implements LogObserver {
    private static final String LOG_FILE_PATH = "/app/logs/logfile.log";

    @Override
    public void logAction(String actionDescription, User initiator, String targetUserId, String browserInformation, String ipAddress) {
        JsonObject logEntry = new JsonObject();
        ZonedDateTime now = ZonedDateTime.now(ZoneId.of("UTC"));
        
        logEntry.addProperty("logId", UUID.randomUUID().toString()); // Use an autogenerated UUID
        logEntry.addProperty("timestamp", now.toInstant().toEpochMilli() / 1000.0); // use seconds from Epoch + nano seconds
        // logEntry.addProperty("timestamp", now.format(DateTimeFormatter.ISO_INSTANT));
        logEntry.addProperty("timezone", "UTC");
        logEntry.addProperty("description", actionDescription);
        logEntry.addProperty("deviceInfo", browserInformation); // Implement this method based on your requirements
        logEntry.addProperty("ipAddress", ipAddress);
        logEntry.addProperty("initiatorUser", initiator.getUserId());
        logEntry.addProperty("targetUser", targetUserId);

        try (FileWriter fileWriter = new FileWriter(LOG_FILE_PATH, true)) {
            fileWriter.write(logEntry.toString() + "\n");
        } catch (IOException e) {
            e.printStackTrace(); // Consider a more graceful exception handling
        }
    }
}

